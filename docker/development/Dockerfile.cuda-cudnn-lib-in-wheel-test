# Copyright 2022 Sony Group Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

############################################################ OpenMPI
# CentOS7:     1.10.7-1 (12)
# Ubuntu16:    1.10.2-1 (12)
# Ubuntu18:    2.1.1-1  (20)
# CentOS7:     3.1.6-1  (30)
# RockyLinux8: 3.1.6-1  (30)
# Ubuntu20:    4.1.5-1  (40)
# ABCI:        4.1.5-1  (40)

FROM rockylinux:8 as openmpi

ARG PIP_INS_OPTS
ARG PYTHONWARNINGS
ARG CURL_OPTS
ARG WGET_OPTS
ARG DNF_OPTS
ARG MPIVER=3.1.6
ARG HPCX_URL_rhel

ENV LC_ALL C
ENV LANG C
ENV LANGUAGE C

RUN eval ${DNF_OPTS} \
    && dnf install -y \
       epel-release \
       dnf-plugins-core \
    && dnf install -y \
       curl \
       rpm-build \
    && if [ $(echo "${MPIVER}" | awk -F. '{ printf("%d%02d%02d\n", $1,$2,$3); }') -gt 30106 ]; then \
        dnf install -y libibverbs \
        librdmacm \
        rdma-core-devel \
        numactl-libs \
        numactl-devel \
        binutils-devel \
        patch; \
       fi \
    && dnf group install -y "Development Tools" \
    && dnf clean all

COPY docker/release/hpcx-init.patch /tmp/hpcx-init.patch
COPY docker/release/hpcx-ompi-etc.patch /tmp/hpcx-ompi-etc.patch

RUN if [ $(echo "${MPIVER}" | awk -F. '{ printf("%d%02d%02d\n", $1,$2,$3); }') -gt 30106 ]; then \
        mkdir /root/openmpi-hpcx \
        && cd /root/openmpi-hpcx \
        && curl ${CURL_OPTS} -LO ${HPCX_URL_rhel} \
        && tar -xvf hpcx*.tbz \
        && rm -f hpcx*.tbz \
        && mv hpcx* hpcx \
        && cd hpcx \
        && ./utils/hpcx_rebuild.sh --ompi-extra-config --enable-openib-rdmacm-ibaddr \
        && cp -ap ./hpcx-rebuild/lib/libmca_common_verbs.* ./ompi/lib/ \
        && cp -ap ./hpcx-rebuild/lib/openmpi/mca_btl_openib.* ./ompi/lib/openmpi/ \
        && cp -ap ./hpcx-rebuild/share/openmpi/*verbs* ./ompi/share/openmpi/ \
        && cp -ap ./hpcx-rebuild/share/openmpi/*openib* ./ompi/share/openmpi/ \
        && rm -rf ./sources/openmpi-gitclone ./hpcx_rebuild ./hpcx_rebuild.sh \
        && patch -p1 < /tmp/hpcx-init.patch \
        && patch -p1 < /tmp/hpcx-ompi-etc.patch \
        && chmod og+w ./ompi/etc/* \
        && cd ..; \
    else \
        mkdir /root/rpmbuild \
        && cd /root/rpmbuild \
        && curl ${CURL_OPTS} https://download.open-mpi.org/release/open-mpi/v${MPIVER%.*}/openmpi-${MPIVER}-1.src.rpm -o openmpi-${MPIVER}-1.src.rpm \
        && rpmbuild --rebuild openmpi-${MPIVER}-1.src.rpm \
        && mv /root/rpmbuild/RPMS/x86_64/openmpi-${MPIVER}-1.*.rpm /root; \
    fi

FROM rockylinux:8

ARG PIP_INS_OPTS
ARG PYTHONWARNINGS
ARG CURL_OPTS
ARG WGET_OPTS
ARG DNF_OPTS

ARG CUDA_VERSION_MAJOR
ARG CUDA_VERSION_MINOR

ENV LC_ALL C
ENV LANG C
ENV LANGUAGE C

RUN eval ${DNF_OPTS} \
    && curl ${CURL_OPTS} -L https://developer.download.nvidia.com/compute/cuda/repos/rhel8/x86_64/D42D0685.pub -o D42D0685.pub \
    && rpm --import D42D0685.pub \
    && dnf install -y \
       epel-release \
       dnf-plugins-core \
    && dnf config-manager --set-enabled powertools \
    && dnf config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel8/x86_64/cuda-rhel8.repo \
    && dnf install -y \
       ca-certificates \
       curl \
       freetype-devel \
       git \
       hdf5 \
       hdf5-devel \
       lapack-devel \
       libjpeg-devel \
       xz-devel \
       libpng-devel \
       redhat-lsb-core \
       rpm-build \
       unzip \
       wget \
       which \
       zip \
       zlib-static \
       libmpc-devel \
       mpfr-devel \
       gmp-devel \
       openssl-devel \
       bzip2-devel \
       libffi-devel \
       libsndfile \
       zlib-devel \
       bzip2 \
       readline-devel \
       sqlite \
       sqlite-devel \
       tk-devel \
       numactl-libs \
    && dnf install -y \
       nsight-systems-2023.2.3 \
       cuda-toolkit-config-common \
       cuda-toolkit-${CUDA_VERSION_MAJOR}-config-common \
       cuda-toolkit-${CUDA_VERSION_MAJOR}-${CUDA_VERSION_MINOR%.*}-config-common \
       cuda-nvtx-${CUDA_VERSION_MAJOR}-${CUDA_VERSION_MINOR%.*} \
       cuda-nvprof-${CUDA_VERSION_MAJOR}-${CUDA_VERSION_MINOR%.*} \
    && dnf group install -y "Development Tools" \
    && dnf clean all

################################################### gcc
RUN mkdir /tmp/deps \
    && cd /tmp/deps \
    && wget ${WGET_OPTS} http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-6.5.0/gcc-6.5.0.tar.gz \
    && tar zxf gcc-6.5.0.tar.gz \
    && cd gcc-6.5.0 \
    && ./configure --disable-multilib --enable-languages=c,c++ \
    && make -j8 \
    && make install \
    && cd / \
    && rm -rf /tmp/*

############################################################# cmake
ARG CMAKEVER=3.18.4
RUN mkdir /tmp/deps \
    && cd /tmp/deps \
    && dnf install -y cmake3 openssl-devel \
    && curl ${CURL_OPTS} -L https://github.com/Kitware/CMake/releases/download/v${CMAKEVER}/cmake-${CMAKEVER}.tar.gz -o cmake-${CMAKEVER}.tar.gz \
    && tar xf cmake-${CMAKEVER}.tar.gz \
    && cd cmake-${CMAKEVER} \
    && mkdir build \
    && cd build \
    && cmake3 -DBUILD_TESTING=FALSE .. \
    && make -j8 \
    && make install \
    && dnf remove -y cmake3 \
    && dnf clean all \
    && rm -rf /var/cache/dnf/* \
    && cd / \
    && rm -rf /tmp/*

############################################################ Copy OpenMPI
COPY --from=openmpi /root/openmpi-* /root
RUN if [ -e /root/openmpi-*.rpm ]; then rpm -i /root/openmpi-*.rpm; fi
RUN if [ -d /root/hpcx ]; then mkdir /opt/mpi; mv /root/hpcx /opt/mpi/hpcx; fi

############################################################ build python from source
ARG PYTHON_VER
ADD python/requirements.txt /tmp/deps/

ARG ARCH_SUFFIX

################################################## build python from pyenv
RUN git clone https://github.com/pyenv/pyenv.git ~/.pyenv \
    && export PYENV_ROOT="$HOME/.pyenv" \
    && export PATH="$PYENV_ROOT/bin:$PYENV_ROOT/plugins/python-build/bin:$PATH" \
    && export PYTHON_BUILD_CURL_OPTS="${CURL_OPTS}" \
    && export PYTHON_BUILD_WGET_OPTS="${WGET_OPTS}" \
    && export PYTHON_CONFIGURE_OPTS=--disable-shared \
    && PYTHON_VERSION_MINOR=${PYTHON_VER#*.} \
    && eval "$(pyenv init -)" \
    && python-build `pyenv latest -k ${PYTHON_VER}` /usr/local \
    && pyenv global system \
    && pip install ${PIP_INS_OPTS} --no-cache-dir -U pip \
    && pip install ${PIP_INS_OPTS} --no-cache-dir -U -r /tmp/deps/requirements.txt \
    && pip install ${PIP_INS_OPTS} --no-cache-dir --extra-index-url https://developer.download.nvidia.com/compute/redist nvidia-dali-cuda${CUDA_VERSION_MAJOR}0 \
    && rm -rf ~/.pyenv/.git  /tmp/*

RUN rm -f /usr/lib64/libstdc++.so.6
ENV PATH /tmp/.local/bin:/opt/nvidia/nsight-systems/2023.2.3/host-linux-x64/:$PATH
ENV LD_LIBRARY_PATH /usr/local/lib64:$LD_LIBRARY_PATH
ENV CC /usr/local/bin/gcc
ENV CXX /usr/local/bin/g++

# Solve nccl error that No space left on device
# while creating shared memory segment.
RUN echo NCCL_SHM_DISABLE=1 >> /etc/nccl.conf
RUN echo NCCL_P2P_LEVEL=SYS >> /etc/nccl.conf


# Entrypoint
COPY docker/development/.entrypoint-hpcx.sh /opt/.entrypoint.sh
RUN chmod +x /opt/.entrypoint.sh

ENTRYPOINT ["/bin/bash", "-c", "/opt/.entrypoint.sh \"${@}\"", "--"]
