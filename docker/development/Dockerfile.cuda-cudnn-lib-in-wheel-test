# Copyright 2022 Sony Group Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

############################################################ OpenMPI
# CentOS7:  1.10.7-1 (12)
# Ubuntu16: 1.10.2-1 (12)
# Ubuntu18: 2.1.1-1  (20)
# Ubuntu20: 4.0.3-1  (40)
# CentOS7:  3.1.3-1  (40)
# ABCI:     2.1.6-1  (20)
FROM centos:7 as openmpi

ARG PIP_INS_OPTS
ARG PYTHONWARNINGS
ARG CURL_OPTS
ARG WGET_OPTS
ARG YUM_OPTS
ARG MPI=3.1.6

ENV LC_ALL C
ENV LANG C
ENV LANGUAGE C

RUN eval ${YUM_OPTS} \
    && yum install -y \
       epel-release \
       yum-utils \
    && yum install -y \
        curl \
        rpm-build \
    && yum group install -y "Development Tools" \
    && yum clean all

RUN mkdir /root/rpmbuild
RUN cd /root/rpmbuild; curl ${CURL_OPTS} https://download.open-mpi.org/release/open-mpi/v${MPI%.*}/openmpi-${MPI}-1.src.rpm -o openmpi-${MPI}-1.src.rpm
RUN cd /root/rpmbuild; rpmbuild --rebuild openmpi-${MPI}-1.src.rpm
RUN mv /root/rpmbuild/RPMS/x86_64/openmpi-${MPI}-1.*.rpm /root

FROM centos:7

ARG PIP_INS_OPTS
ARG PYTHONWARNINGS
ARG CURL_OPTS
ARG WGET_OPTS
ARG YUM_OPTS

ENV LC_ALL C
ENV LANG C
ENV LANGUAGE C

RUN eval ${YUM_OPTS} \
    && curl ${CURL_OPTS} -L https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/D42D0685.pub -o D42D0685.pub \
    && rpm --import D42D0685.pub \
    && yum install -y \
       epel-release \
       yum-utils \
    && yum install -y \
        curl \
        freetype-devel \
        git \
        hdf5 \
        hdf5-devel \
        lapack-devel \
        libjpeg-devel \
        xz-devel \
        libpng-devel \
        redhat-lsb-core \
        rpm-build \
        unzip \
        wget \
        which \
        zip \
        zlib-static \
        libmpc-devel \
        mpfr-devel \
        gmp-devel \
        openssl-devel \
        bzip2-devel \
        libffi-devel \
        nsight-systems-2021.1.3 \
        libsndfile \
        python-backports-lzma \
    && yum group install -y "Development Tools" \
    && yum clean all

################################################### gcc
RUN mkdir /tmp/deps \
    && cd /tmp/deps \
    && wget ${WGET_OPTS} http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-6.5.0/gcc-6.5.0.tar.gz \
    && tar zxf gcc-6.5.0.tar.gz \
    && cd gcc-6.5.0 \
    && ./configure --disable-multilib --enable-languages=c,c++ \
    && make -j8 \
    && make install \
    && cd / \
    && rm -rf /tmp/*

############################################################# cmake
ARG CMAKEVER=3.18.4
RUN mkdir /tmp/deps \
    && cd /tmp/deps \
    && yum install -y cmake3 openssl-devel \
    && curl ${CURL_OPTS} -L https://github.com/Kitware/CMake/releases/download/v${CMAKEVER}/cmake-${CMAKEVER}.tar.gz -o cmake-${CMAKEVER}.tar.gz \
    && tar xf cmake-${CMAKEVER}.tar.gz \
    && cd cmake-${CMAKEVER} \
    && mkdir build \
    && cd build \
    && cmake3 -DBUILD_TESTING=FALSE .. \
    && make -j8 \
    && make install \
    && yum remove -y cmake3 \
    && yum clean all \
    && rm -rf /var/cache/yum/* \
    && cd / \
    && rm -rf /tmp/*

############################################################ Copy OpenMPI
COPY --from=openmpi /root/openmpi-*.rpm /root
RUN rpm -i /root/openmpi-*.rpm

############################################################ build python from source
ARG PYTHON_VER

ADD python/requirements.txt /tmp/deps/

ARG ARCH_SUFFIX
ARG CU1_VER
ARG CU2_VER
ARG CUDNN_VER
RUN if [ "${PYTHON_VER}" == "3.7" ]; then wget ${WGET_OPTS} https://www.python.org/ftp/python/3.7.10/Python-3.7.10.tgz; fi \
	&& if [ "${PYTHON_VER}" == "3.8" ]; then wget ${WGET_OPTS} https://www.python.org/ftp/python/3.8.8/Python-3.8.8.tgz; fi \
	&& if [ "${PYTHON_VER}" == "3.9" ]; then wget ${WGET_OPTS} https://www.python.org/ftp/python/3.9.8/Python-3.9.8.tgz; fi \
	&& tar -xzf Python-${PYTHON_VER}*.tgz \
	&& cd Python-${PYTHON_VER}* \
	&& ./configure --enable-optimizations \
	&& make altinstall \
	&& ln -s /usr/local/bin/python${PYTHON_VER} /usr/local/bin/python \
	&& ln -s /usr/local/bin/pip${PYTHON_VER} /usr/local/bin/pip \
	&& pip install ${PIP_INS_OPTS} -U -r /tmp/deps/requirements.txt \
	&& pip install ${PIP_INS_OPTS} --extra-index-url https://developer.download.nvidia.com/compute/redist nvidia-dali-cuda${CU1_VER}${CU2_VER%.?} \
        || echo "Skip nvidia dali installation" \
	&& cd .. \
	&& rm -rf Python-${PYTHON_VER}* \
	&& rm -rf /tmp/*

RUN rm -f /usr/lib64/libstdc++.so.6
ENV PATH /tmp/.local/bin:$PATH
ENV LD_LIBRARY_PATH /usr/local/lib64:$LD_LIBRARY_PATH
ENV CC /usr/local/bin/gcc
ENV CXX /usr/local/bin/g++

# Solve nccl error that No space left on device
# while creating shared memory segment.
RUN echo NCCL_SHM_DISABLE=1 >> /etc/nccl.conf
RUN echo NCCL_P2P_LEVEL=SYS >> /etc/nccl.conf

WORKDIR /home
CMD [ "/bin/bash" ]
