# Copyright 2020,2021 Sony Corporation.
# Copyright 2021 Sony Group Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

############################################################ OpenMPI
# CentOS7:  1.10.7 (12)
# Ubuntu16: 1.10.2 (12)
# Ubuntu18: 2.1.1  (20)
# Ubuntu20: 4.0.3  (40)
# CentOS7:  3.1.3  (40)
# ABCI:     2.1.6  (20)

ARG CUDA_VERSION_MAJOR=10
ARG CUDA_VERSION_MINOR=0
ARG CUDNN_VERSION=7

FROM ubuntu:18.04 as openmpi

ARG PIP_INS_OPTS
ARG PYTHONWARNINGS
ARG CURL_OPTS
ARG WGET_OPTS
ARG APT_OPTS

ENV LC_ALL C
ENV LANG C
ENV LANGUAGE C

RUN eval ${APT_OPTS} \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        curl \
        ca-certificates \
        build-essential \
        gfortran \
        libibverbs-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ARG MPIVER=2.1.6
RUN mkdir /tmp/openmpi
RUN curl ${CURL_OPTS} https://download.open-mpi.org/release/open-mpi/v${MPIVER%.*}/openmpi-${MPIVER}.tar.bz2 -o /tmp/openmpi/openmpi-${MPIVER}.tar.bz2
RUN tar Cxvf /tmp/openmpi /tmp/openmpi/openmpi-${MPIVER}.tar.bz2
RUN cd tmp/openmpi/openmpi-${MPIVER}\
    && ./configure \
        --prefix=/opt/openmpi --enable-orterun-prefix-by-default --with-sge \
        CC=gcc \
        CXX=g++ \
        F77=gfortran \
        FC=gfortran \
    && make -j8 \
    && make install

FROM nvidia/cuda-ppc64le:${CUDA_VERSION_MAJOR}.${CUDA_VERSION_MINOR}-cudnn${CUDNN_VERSION}-devel-ubuntu18.04

ARG PIP_INS_OPTS
ARG PYTHONWARNINGS
ARG CURL_OPTS
ARG WGET_OPTS
ARG APT_OPTS

ENV LC_ALL C
ENV LANG C
ENV LANGUAGE C

ARG PYTHON_VERSION_MAJOR=3
ARG PYTHON_VERSION_MINOR=6
ENV PYVERNAME=${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}
RUN eval ${APT_OPTS} \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        curl \
        ca-certificates \
        git \
        rpm \
        libhdf5-dev \
        libjpeg-dev \
        liblapack-dev \
        liblzma-dev \
        libpng-dev \
        unzip \
        wget \
        zip \
        zlibc \
        cmake \
        libmpc-dev \
        libmpfr-dev \
        libgmp-dev \
        openssl \
        libssl-dev \
        bzip2 \
        libffi-dev \
        build-essential \
        clang-format-5.0 \
        libarchive-dev \
        libgoogle-glog-dev \
        make \
        python3-venv \
        python3-pip \
        libpython${PYVERNAME}-dev \
        python${PYVERNAME} \
        python${PYVERNAME}-venv \
        software-properties-common \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ARG CUDA_VERSION_MAJOR=10
ARG CUDA_VERSION_MINOR=0
ARG CUDNN_VERSION=7

############################################################# NCCL
RUN wget ${WGET_OPTS} https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/ppc64el/cuda-ubuntu1804.pin
RUN mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600
RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/ppc64le/7fa2af80.pub
RUN add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/ppc64le/ /"

RUN eval ${APT_OPTS} \
    && apt-get update \
    && apt-get install -y \
        libnccl2=*+cuda${CUDA_VERSION_MAJOR}.${CUDA_VERSION_MINOR} \
        libnccl-dev=*+cuda${CUDA_VERSION_MAJOR}.${CUDA_VERSION_MINOR} \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN update-alternatives --install /usr/bin/python python /usr/bin/python${PYVERNAME} 0

RUN python -m pip install ${PIP_INS_OPTS} -U pip

RUN add-apt-repository 'deb http://archive.ubuntu.com/ubuntu/ xenial main' \
    && add-apt-repository 'deb http://archive.ubuntu.com/ubuntu/ xenial universe'

RUN eval ${APT_OPTS} \
    && apt-get update \
    && apt-get install -y g++-4.9 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 10
RUN update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 10

############################################################# cmake
ARG CMAKEVER=3.18.4
RUN mkdir /tmp/deps \
    && cd /tmp/deps \
    && curl ${CURL_OPTS} -L https://github.com/Kitware/CMake/releases/download/v${CMAKEVER}/cmake-${CMAKEVER}.tar.gz -o cmake-${CMAKEVER}.tar.gz \
    && tar xf cmake-${CMAKEVER}.tar.gz \
    && cd cmake-${CMAKEVER} \
    && mkdir build \
    && cd build \
    && cmake -DBUILD_TESTING=FALSE .. \
    && make -j8 \
    && make install \
    && cd / \
    && rm -rf /tmp/*

############################################################ protobuf
ARG PROTOVER=3.10.1
RUN mkdir /tmp/deps \
    && cd /tmp/deps \
    && curl ${CURL_OPTS} -L https://github.com/google/protobuf/archive/v${PROTOVER}.tar.gz -o protobuf-v${PROTOVER}.tar.gz \
    && tar xvf protobuf-v${PROTOVER}.tar.gz \
    && cd protobuf-${PROTOVER} \
    && mkdir build \
    && cd build \
    && cmake \
        -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
        -Dprotobuf_BUILD_TESTS=OFF \
        ../cmake \
    && make \
    && make install \
    && cd / \
    && rm -rf /tmp/*

############################################################ libarchive
RUN mkdir /tmp/deps \
    && cd /tmp/deps \
    && curl ${CURL_OPTS} -L https://www.libarchive.org/downloads/libarchive-3.3.2.tar.gz -o libarchive-3.3.2.tar.gz \
    && tar xfa libarchive-3.3.2.tar.gz \
    && mkdir libarchive-build \
    && cd libarchive-build \
    && cmake \
        -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DENABLE_NETTLE=FALSE -DENABLE_OPENSSL=FALSE \
        -DENABLE_LZO=FALSE -DENABLE_LZMA=FALSE -DENABLE_BZip2=FALSE \
        -DENABLE_LIBXML2=FALSE -DENABLE_EXPAT=FALSE -DENABLE_PCREPOSIX=FALSE -DENABLE_LibGCC=FALSE \
        -DENABLE_CNG=FALSE -DENABLE_TAR=FALSE -DENABLE_TAR_SHARED=FALSE -DENABLE_CPIO=FALSE \
        -DENABLE_CPIO_SHARED=FALSE -DENABLE_CAT=FALSE -DENABLE_CAT_SHARED=FALSE -DENABLE_XATTR=FALSE \
        -DENABLE_ACL=FALSE -DENABLE_ICONV=FALSE -DENABLE_TEST=FALSE \
        ../libarchive-3.3.2 \
    && make install \
    && cd / \
    && rm -rf /tmp/*

############################################################ patchelf
RUN mkdir /tmp/deps \
    && cd /tmp/deps \
    && wget ${WGET_OPTS} http://nixos.org/releases/patchelf/patchelf-0.9/patchelf-0.9.tar.bz2 \
    && tar xfa patchelf-0.9.tar.bz2 \
    && cd patchelf-0.9 \
    && ./configure \
    && make \
    && make install \
    && cd / \
    && rm -rf /tmp/*

############################################################ Copy OpenMPI
COPY --from=openmpi /opt/openmpi /opt/openmpi
ENV PATH /opt/openmpi/bin:$PATH
ENV LD_LIBRARY_PATH /opt/openmpi/lib:$LD_LIBRARY_PATH

ADD python/requirements.txt /tmp/deps/
RUN pip install ${PIP_INS_OPTS} -U -r /tmp/deps/requirements.txt \
	&& rm -rf /tmp/*

RUN rm -f /usr/lib64/libstdc++.so.6
ENV PATH /tmp/.local/bin:$PATH
ENV LD_LIBRARY_PATH /usr/lib64:$LD_LIBRARY_PATH
ENV CC /usr//bin/gcc-4.9
ENV CXX /usr/bin/g++-4.9

####################################################
# Solve nccl error that No space left on device
# while creating shared memory segment.
####################################################
RUN echo NCCL_SHM_DISABLE=1 >> /etc/nccl.conf
RUN echo NCCL_P2P_LEVEL=SYS >> /etc/nccl.conf
