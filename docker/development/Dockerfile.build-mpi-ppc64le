# Copyright (c) 2017 Sony Corporation. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


ARG CUDA_VERSION_MAJOR=10
ARG CUDA_VERSION_MINOR=0
ARG CUDNN_VERSION=7

############################################################ OpenMPI
# CentOS7:  1.10.7 (12)
# Ubuntu16: 1.10.2 (12)
# Ubuntu18: 2.1.1  (20)
# Ubuntu20: 4.0.3  (40)
# CentOS7:  3.1.3  (40)
# ABCI:     2.1.6  (20)
FROM centos:7 as openmpi

ENV LC_ALL C
ENV LANG C
ENV LANGUAGE C

RUN yum install -y \
    epel-release \
    yum-utils \
    && yum install -y \
        curl \
        rpm-build \
    && yum group install -y "Development Tools" \
    && yum clean all

ARG MPIVER=2.1.6
RUN mkdir /root/rpmbuild
RUN cd /root/rpmbuild; curl https://download.open-mpi.org/release/open-mpi/v${MPIVER%.*}/openmpi-${MPIVER}-1.src.rpm -o openmpi-${MPIVER}-1.src.rpm
RUN cd /root/rpmbuild; rpmbuild --rebuild openmpi-${MPIVER}-1.src.rpm
RUN mv /root/rpmbuild/RPMS/ppc64le/openmpi-${MPIVER}-1.*.rpm /root

FROM nvidia/cuda-ppc64le:${CUDA_VERSION_MAJOR}.${CUDA_VERSION_MINOR}-cudnn${CUDNN_VERSION}-devel-centos7

ENV LC_ALL C
ENV LANG C
ENV LANGUAGE C

RUN yum install -y https://developer.download.nvidia.com/compute/machine-learning/repos/rhel7/ppc64le/nvidia-machine-learning-repo-rhel7-1.0.0-1.ppc64le.rpm
RUN yum install -y libnccl libnccl-devel

RUN yum install -y \
    epel-release \
    yum-utils \
    && yum install -y \
        curl \
        freetype-devel \
        git \
        hdf5 \
        hdf5-devel \
        lapack-devel \
        libjpeg-devel \
        liblzma-devel \
        libpng-devel \
        redhat-lsb-core \
        rpm-build \
        unzip \
        wget \
        which \
        zip \
        zlib-static \
        libmpc-devel \
        mpfr-devel \
        gmp-devel \
    && yum group install -y "Development Tools" \
    && yum clean all

################################################### gcc
RUN mkdir /tmp/deps \
    && cd /tmp/deps \
    && wget http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-4.9.2/gcc-4.9.2.tar.bz2 \
    && tar xfj gcc-4.9.2.tar.bz2 \
    && cd gcc-4.9.2 \
    && ./configure --disable-multilib --enable-languages=c,c++ \
    && make -j8 \
    && make install \
    && cd / \
    && rm -rf /tmp/*

############################################################# cmake
ARG CMAKEVER=3.14.3
RUN mkdir /tmp/deps \
    && cd /tmp/deps \
    && yum install -y cmake3 \
    && curl -L https://github.com/Kitware/CMake/releases/download/v${CMAKEVER}/cmake-${CMAKEVER}.tar.gz -o cmake-${CMAKEVER}.tar.gz \
    && tar xf cmake-${CMAKEVER}.tar.gz \
    && cd cmake-${CMAKEVER} \
    && mkdir build \
    && cd build \
    && cmake3 -DBUILD_TESTING=FALSE .. \
    && make \
    && make install \
    && yum remove -y cmake3 \
    && yum clean all \
    && rm -rf /var/cache/yum/* \
    && cd / \
    && rm -rf /tmp/*

############################################################ protobuf
ARG PROTOVER=3.10.1
RUN mkdir /tmp/deps \
    && cd /tmp/deps \
    && curl -L https://github.com/google/protobuf/archive/v${PROTOVER}.tar.gz -o protobuf-v${PROTOVER}.tar.gz \
    && tar xvf protobuf-v${PROTOVER}.tar.gz \
    && cd protobuf-${PROTOVER} \
    && mkdir build \
    && cd build \
    && cmake \
        -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
        -Dprotobuf_BUILD_TESTS=OFF \
        ../cmake \
    && make \
    && make install \
    && cd / \
    && rm -rf /tmp/*

############################################################ libarchive
RUN mkdir /tmp/deps \
    && cd /tmp/deps \
    && curl -L https://www.libarchive.org/downloads/libarchive-3.3.2.tar.gz -o libarchive-3.3.2.tar.gz \
    && tar xfa libarchive-3.3.2.tar.gz \
    && mkdir libarchive-build \
    && cd libarchive-build \
    && cmake \
        -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DENABLE_NETTLE=FALSE -DENABLE_OPENSSL=FALSE \
        -DENABLE_LZO=FALSE -DENABLE_LZMA=FALSE -DENABLE_BZip2=FALSE \
        -DENABLE_LIBXML2=FALSE -DENABLE_EXPAT=FALSE -DENABLE_PCREPOSIX=FALSE -DENABLE_LibGCC=FALSE \
        -DENABLE_CNG=FALSE -DENABLE_TAR=FALSE -DENABLE_TAR_SHARED=FALSE -DENABLE_CPIO=FALSE \
        -DENABLE_CPIO_SHARED=FALSE -DENABLE_CAT=FALSE -DENABLE_CAT_SHARED=FALSE -DENABLE_XATTR=FALSE \
        -DENABLE_ACL=FALSE -DENABLE_ICONV=FALSE -DENABLE_TEST=FALSE \
        ../libarchive-3.3.2 \
    && make install \
    && cd / \
    && rm -rf /tmp/*

############################################################ patchelf
RUN mkdir /tmp/deps \
    && cd /tmp/deps \
    && wget http://nixos.org/releases/patchelf/patchelf-0.9/patchelf-0.9.tar.bz2 \
    && tar xfa patchelf-0.9.tar.bz2 \
    && cd patchelf-0.9 \
    && ./configure \
    && make \
    && make install \
    && cd / \
    && rm -rf /tmp/*

############################################################ Copy OpenMPI
COPY --from=openmpi /root/openmpi-*.rpm /root
RUN rpm -i /root/openmpi-*.rpm

############################################################ miniconda3
ARG PYTHON_VERSION_MAJOR=3
ARG PYTHON_VERSION_MINOR=6
ENV PYVERNAME=${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}

ADD python/requirements.txt /tmp/deps/
RUN umask 0 \
    && mkdir -p /tmp/deps \
    && cd /tmp/deps \
    && wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-ppc64le.sh \
    && bash Miniconda3-latest-Linux-ppc64le.sh -b -p /opt/miniconda3 \
    && rm -rf Miniconda3-latest-Linux-ppc64le.sh \
    && . /opt/miniconda3/bin/activate \
    && conda update -n base -c defaults conda \
    && conda create -n nnabla-build python=${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR} \
    && conda activate nnabla-build \
    && conda update --all -y \
    && conda install -y numpy scipy scikit-image six \
    && pip install -r /tmp/deps/requirements.txt \
    && conda clean -y --all \
    && cd / \
    && rm -rf /tmp/*

ENV PATH /opt/miniconda3/envs/nnabla-build/bin:$PATH
ENV LD_LIBRARY_PATH /opt/miniconda3/envs/nnabla-build/lib:$LD_LIBRARY_PATH
ENV CC /usr/local/bin/gcc
ENV CXX /usr/local/bin/g++

####################################################
# Solve nccl error that No space left on device
# while creating shared memory segment.
####################################################
RUN echo NCCL_SHM_DISABLE=1 >> /etc/nccl.conf
RUN echo NCCL_P2P_LEVEL=SYS >> /etc/nccl.conf
