# Copyright 2020,2021 Sony Corporation.
# Copyright 2021,2022 Sony Group Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Flatbuffer compiler
ARG CU1_VER
ARG CU2_VER
ARG CUDNN_VER
FROM ubuntu:18.04 as flatc

ARG PIP_INS_OPTS
ARG PYTHONWARNINGS
ARG CURL_OPTS
ARG WGET_OPTS
ARG APT_OPTS

ENV DEBIAN_FRONTEND noninteractive

RUN eval ${APT_OPTS} \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
       ca-certificates \
       curl \
       cmake \
       make \
       g++ \
       git \
    && rm -rf /var/lib/apt/lists/*

RUN umask 0 \
    && mkdir -p /tmp/deps \
    && cd /tmp/deps \
    && git clone -b \
       `curl --silent "https://api.github.com/repos/google/flatbuffers/releases/latest" | grep -Po '"tag_name": "\K.*?(?=")'`
       https://github.com/google/flatbuffers.git \
    && cd flatbuffers \
    && cmake -G "Unix Makefiles" \
    && make \
    && make install \
    && cd / \
    && rm -rf /tmp/*

FROM ubuntu:18.04 as openmpi

ARG PIP_INS_OPTS
ARG PYTHONWARNINGS
ARG CURL_OPTS
ARG WGET_OPTS
ARG APT_OPTS
ARG MPI
ARG MPI_OPTS

ENV DEBIAN_FRONTEND noninteractive

RUN eval ${APT_OPTS} && apt-get update
RUN apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        gfortran \
        libibverbs-dev

RUN apt-get install -y --no-install-recommends ca-certificates

RUN mkdir /tmp/openmpi
RUN curl ${CURL_OPTS} https://download.open-mpi.org/release/open-mpi/v${MPI%.*}/openmpi-${MPI}.tar.bz2 -o /tmp/openmpi/openmpi-${MPI}.tar.bz2
RUN tar Cxvf /tmp/openmpi /tmp/openmpi/openmpi-${MPI}.tar.bz2
RUN cd tmp/openmpi/openmpi-${MPI} \
    && ./configure \
        --prefix=/opt/openmpi --enable-orterun-prefix-by-default --with-sge ${MPI_OPTS} \
        CC=gcc \
        CXX=g++ \
        F77=gfortran \
        FC=gfortran \
    && make -j8 \
    && make install

FROM nvidia/cuda:${CU1_VER}.${CU2_VER}-cudnn${CUDNN_VER}-runtime-ubuntu18.04

ARG CU1_VER
ARG CU2_VER
ARG CUDNN_VER
ARG PYTHON_VER
ARG PIP_INS_OPTS
ARG PYTHONWARNINGS
ARG CURL_OPTS
ARG WGET_OPTS
ARG APT_OPTS
ARG MPI

ENV DEBIAN_FRONTEND noninteractive

RUN eval ${APT_OPTS} \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
    software-properties-common \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN add-apt-repository ppa:deadsnakes/ppa

RUN eval ${APT_OPTS} && apt-get update \
    && apt-get install -y --no-install-recommends \
       bzip2 \
       ca-certificates \
       curl \
       libglib2.0-0 \
       libgl1-mesa-glx \
       python${PYTHON_VER} \
       python3-pip \
       python${PYTHON_VER}-distutils \
       openssh-client \
       ibverbs-providers \
       opensm \
       libdapl2 \
       libibmad5 \
       librdmacm1 \
    && rm -rf /var/lib/apt/lists/*

RUN update-alternatives --install /usr/bin/python python /usr/bin/python${PYTHON_VER} 0
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${PYTHON_VER} 0

RUN pip3 install ${PIP_INS_OPTS} --upgrade pip
RUN pip install ${PIP_INS_OPTS} wheel setuptools
RUN pip install ${PIP_INS_OPTS} opencv-python || true

RUN pip install ${PIP_INS_OPTS} --extra-index-url https://developer.download.nvidia.com/compute/redist nvidia-dali-cuda${CU1_VER}${CU2_VER} \
    || echo "Skip DALI installation (CUDA=${CU1_VER}.${CU2_VER})"

COPY --from=openmpi /opt/openmpi /opt/openmpi
ENV PATH /opt/openmpi/bin:$PATH
ENV LD_LIBRARY_PATH /opt/openmpi/lib:$LD_LIBRARY_PATH

COPY --from=flatc /usr/local/bin/flatc /usr/local/bin/flatc

ARG NNABLA_VER
RUN pip install ${PIP_INS_OPTS} nnabla-ext-cuda${CU1_VER}${CU2_VER}-nccl2-mpi${MPI}==${NNABLA_VER} nnabla_converter==${NNABLA_VER}

# cuda compat driver support
COPY cudalibcheck /usr/local/bin/cudalibcheck
COPY shinit_v2 /etc/shinit_v2
RUN mkdir -p -m 775 /usr/local/cuda/compat/lib \
    && cd /usr/local/cuda/compat/lib \
    && for f in ../*.so*; do ln -sf $f .; done \
    && echo /usr/local/cuda/compat/lib > /etc/ld.so.conf.d/00-cuda-compat.conf \
    && ldconfig \
    && rm -f /usr/local/cuda/compat/lib/*.so*

# singularity environment
RUN mkdir -p -m 775 /.singularity.d/env
COPY 20-nvidia-cuda-compat.sh /.singularity.d/env/20-nvidia-cuda-compat.sh

# Solve nccl error that No space left on device
# while creating shared memory segment.
RUN echo NCCL_SHM_DISABLE=1 >> /etc/nccl.conf
RUN echo NCCL_P2P_LEVEL=SYS >> /etc/nccl.conf

# Prepare default user
ARG WORK_PATH_ARG="/home/nnabla"
RUN useradd -m nnabla
COPY .bashrc ${WORK_PATH_ARG}/.bashrc
RUN chown -R nnabla:nnabla ${WORK_PATH_ARG}

# Entrypoint
COPY .entrypoint-cuda-mpi.sh /opt/.entrypoint.sh
RUN chmod +x /opt/.entrypoint.sh

USER nnabla
WORKDIR ${WORK_PATH_ARG}
ENTRYPOINT ["/bin/bash", "-c", "/opt/.entrypoint.sh \"${@}\"", "--"]
