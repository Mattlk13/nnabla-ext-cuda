# Copyright 2020,2021 Sony Corporation.
# Copyright 2021,2022 Sony Group Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ARG CU1_VER
ARG CU2_VER
ARG CUDNN_VER

FROM ubuntu:18.04 as openmpi

ARG PIP_INS_OPTS
ARG PYTHONWARNINGS
ARG CURL_OPTS
ARG WGET_OPTS
ARG APT_OPTS
ARG MPI
ARG MPI_OPTS

RUN eval ${APT_OPTS} \
    && apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        build-essential \
        ca-certificates \
        curl \
        gfortran \
        libibverbs-dev \
        librdmacm1 \
        librdmacm-dev \
        libnuma1 \
        libnuma-dev \
        patch \
    && rm -rf /var/lib/apt/lists/*

COPY hpcx-init.patch /tmp/hpcx-init.patch
COPY hpcx-ompi-etc.patch /tmp/hpcx-ompi-etc.patch
RUN if [ $(echo "${MPI}" | awk -F. '{ printf("%d%02d%02d\n", $1,$2,$3); }') -gt 30106 ]; then \
        mkdir /opt/mpi \
        && cd /opt/mpi \
        && curl -LO http://www.mellanox.com/downloads/hpc/hpc-x/v2.12/hpcx-v2.12-gcc-MLNX_OFED_LINUX-5-ubuntu18.04-cuda11-gdrcopy2-nccl2.12-x86_64.tbz \
        && tar -xvf hpcx*.tbz \
        && rm -f hpcx*.tbz \
        && mv hpcx* hpcx-v2.12 \
        && cd hpcx-v2.12 \
        && ./utils/hpcx_rebuild.sh --ompi-extra-config --enable-openib-rdmacm-ibaddr \
        && cp -ap ./hpcx-rebuild/lib/libmca_common_verbs.* ./ompi/lib/ \
        && cp -ap ./hpcx-rebuild/lib/openmpi/mca_btl_openib.* ./ompi/lib/openmpi/ \
        && cp -ap ./hpcx-rebuild/share/openmpi/*verbs* ./ompi/share/openmpi/ \
        && cp -ap ./hpcx-rebuild/share/openmpi/*openib* ./ompi/share/openmpi/ \
        && rm -rf ./sources/openmpi-gitclone ./hpcx_rebuild ./hpcx_rebuild.sh \
        && patch -p1 < /tmp/hpcx-init.patch \
        && patch -p1 < /tmp/hpcx-ompi-etc.patch \
        && chmod og+w ./ompi/etc/* \
        && cd ..; \
    else \
        mkdir /tmp/openmpi \
        && curl ${CURL_OPTS} https://download.open-mpi.org/release/open-mpi/v${MPI%.*}/openmpi-${MPI}.tar.bz2 -o /tmp/openmpi/openmpi-${MPI}.tar.bz2 \
        && tar Cxvf /tmp/openmpi /tmp/openmpi/openmpi-${MPI}.tar.bz2 \
        && cd tmp/openmpi/openmpi-${MPI} \
        && ./configure \
            --prefix=/opt/mpi --enable-orterun-prefix-by-default --with-sge ${MPI_OPTS} \
            CC=gcc \
            CXX=g++ \
            F77=gfortran \
            FC=gfortran \
        && make -j8 \
        && make install \
        && echo btl_openib_allow_ib = 1 >> /opt/mpi/etc/openmpi-mca-params.conf; \
    fi


FROM nvidia/cuda:${CU1_VER}.${CU2_VER}-cudnn${CUDNN_VER}-runtime-ubuntu18.04

ARG CU1_VER
ARG CU2_VER
ARG PYTHON_VER
ARG PIP_INS_OPTS
ARG PYTHONWARNINGS
ARG CURL_OPTS
ARG WGET_OPTS
ARG APT_OPTS

RUN eval ${APT_OPTS} \
    && apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub \
    && apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
       bzip2 \
       ca-certificates \
       curl \
       openssh-client \
       ibverbs-providers \
       opensm \
       libdapl2 \
       libibmad5 \
       librdmacm1 \
       libnuma1 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

################################################## build python from pyenv
ARG NNABLA_VER
RUN eval ${APT_OPTS} \
    && apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
       git \
       make \
       build-essential \
       libssl-dev \
       zlib1g-dev \
       libbz2-dev \
       libreadline-dev \
       libsqlite3-dev \
       wget \
       llvm \
       libncursesw5-dev \
       xz-utils \
       tk-dev \
       libxml2-dev \
       libxmlsec1-dev \
       libffi-dev \
       liblzma-dev \
    && git clone https://github.com/pyenv/pyenv.git ~/.pyenv \
    && export PYENV_ROOT="$HOME/.pyenv" \
    && export PATH="$PYENV_ROOT/bin:$PYENV_ROOT/plugins/python-build/bin:$PATH" \
    && export PYTHON_BUILD_CURL_OPTS="${CURL_OPTS}" \
    && export PYTHON_BUILD_WGET_OPTS="${WGET_OPTS}" \
    && export PYTHON_CONFIGURE_OPTS=--disable-shared \
    && PYTHON_VERSION_MINOR=${PYTHON_VER#*.} \
    && if [ ${PYTHON_VERSION_MINOR} -ge 10 ]; then export CPPFLAGS=-I/usr/include/openssl11 && export LDFLAGS=-L/usr/lib64/openssl11; fi \
    && export CPPFLAGS=-I/usr/include/openssl11 \
    && export LDFLAGS=-L/usr/lib64/openssl11 \
    && eval "$(pyenv init -)" \
    && python-build `pyenv latest -k ${PYTHON_VER}` /usr/local \
    && pyenv global system \
    && rm -rf ~/.pyenv /tmp/* \
    && apt autoremove --purge -y \
       git \
       make \
       build-essential \
       libssl-dev \
       zlib1g-dev \
       libbz2-dev \
       libreadline-dev \
       libsqlite3-dev \
       wget \
       llvm \
       libncursesw5-dev \
       xz-utils \
       tk-dev \
       libxml2-dev \
       libxmlsec1-dev \
       libffi-dev \
       liblzma-dev \
    && pip install ${PIP_INS_OPTS} --no-cache-dir --upgrade pip \
    && pip install ${PIP_INS_OPTS} --no-cache-dir wheel setuptools \
    && pip install ${PIP_INS_OPTS} --no-cache-dir opencv-python-headless || true \
    && (pip install ${PIP_INS_OPTS} --no-cache-dir --extra-index-url https://developer.download.nvidia.com/compute/redist nvidia-dali-cuda${CU1_VER}0 \
       || echo "Skip DALI installation (CUDA=${CU1_VER}.${CU2_VER})") \
    && pip install ${PIP_INS_OPTS} --no-cache-dir nnabla-ext-cuda${CU1_VER}${CU2_VER%.?}==${NNABLA_VER} nnabla_converter==${NNABLA_VER}

COPY --from=openmpi /opt/mpi /opt/mpi

# cuda compat driver support
COPY cudalibcheck /usr/local/bin/cudalibcheck
COPY shinit_v2 /etc/shinit_v2
RUN mkdir -p -m 775 /usr/local/cuda/compat/lib \
    && cd /usr/local/cuda/compat/lib \
    && for f in ../*.so*; do ln -sf $f .; done \
    && echo /usr/local/cuda/compat/lib > /etc/ld.so.conf.d/00-cuda-compat.conf \
    && ldconfig \
    && rm -f /usr/local/cuda/compat/lib/*.so*

# singularity environment
RUN mkdir -p -m 775 /.singularity.d/env
COPY 20-nvidia-cuda-compat.sh /.singularity.d/env/20-nvidia-cuda-compat.sh

# Solve nccl error that No space left on device
# while creating shared memory segment.
RUN echo NCCL_SHM_DISABLE=1 >> /etc/nccl.conf
RUN echo NCCL_P2P_LEVEL=SYS >> /etc/nccl.conf

# Prepare default user
ARG WORK_PATH_ARG="/home/nnabla"
RUN useradd -m nnabla
COPY .bashrc ${WORK_PATH_ARG}/.bashrc
RUN chown -R nnabla:nnabla ${WORK_PATH_ARG}

# Entrypoint
COPY .entrypoint-cuda-mpi.sh /opt/.entrypoint.sh
RUN chmod +x /opt/.entrypoint.sh

USER nnabla
WORKDIR ${WORK_PATH_ARG}
ENTRYPOINT ["/bin/bash", "-c", "/opt/.entrypoint.sh \"${@}\"", "--"]
